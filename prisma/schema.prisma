// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    owner
    admin
    user
}

model User {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    email    String    @unique
    password String
    role     UserRole
    accounts Account[]
    sessions Session[]

    dnis DniOnUsers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Dni {
    document       Int      @id
    photoFace      String
    photoSignature String
    surname        String
    name           String
    sex            String
    nationality    String
    exemplar       String
    birthDate      DateTime
    issueDate      DateTime
    expiryDate     DateTime
    tramitNumber   String
    codePDF417     String
    donor          String
    officeNumber   String

    address                        String
    birthPlace                     String
    cuil                           String
    interiorMinisterName           String
    photoInteriorMinisterSignature String
    photoFingerPrint               String
    mechanicalReadingArea          String

    photoBgFront String
    photoBgBack  String

    users DniOnUsers[]
}

model DniOnUsers {
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    dni   Dni @relation(fields: [dniId], references: [document], onDelete: Cascade)
    dniId Int

    @@id([userId, dniId])
    @@index([userId])
    @@index([dniId])
}
